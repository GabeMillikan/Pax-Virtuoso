import random

from abilities.music.youtube import *

song = asyncio.run(fetch("anti up chromatic"))

bytes_produces = 0
packet_count = 0
while packet := song.stream.read():
    packet_count += 1
    bytes_produces += len(packet)

    song.stream.volume = random.random() + 0.5

print("Data size:", bytes_produces, "bytes across", packet_count, "packets")

# from opuslib import Decoder

# p = bytes.fromhex(
#     "4F 70 75 73 48 65 61 64 01 02 38 01 80 BB 00 00 00 00 00 "
#     # "4F 70 75 73 54 61 67 73 0C 00 00 00 4C 61 76 66 36 30 2E 33 2E 31 30 30 02 00 00 00 0C 00 00 00 6C 61 6E 67 75 61 67 65 3D 65 6E 67 1C 00 00 00 65 6E 63 6F 64 65 72 3D 4C 61 76 63 36 30 2E 33 2E 31 30 30 20 6C 69 62 6F 70 75 73 "
#     # "FC FF FE "


#     # "FC 1F 1E 98 DC F7 79 78 8F C0 CA D9 F2 C7 2C 8A 52 96 46 62 FF 39 30 8D 17 8C F6 65 C4 0A DA 43 E6 72 5A ED 85 2C C5 5E B9 0B 1D 4A C5 69 D2 39 FD A7 7D 72 43 67 D6 87 FE 7F AA 01 79 4C 01 F7 35 11 45 C9 3E 75 68 97 B2 4E CA 64 16 53 4B 59 96 72 FE C0 07 65 DC 2C 56 36 1E 13 29 50 FF 56 45 39 AF 56 93 45 D4 F3 98 04 2F 6F 1D FA 62 00 3D 33 E1 4D E8 2B DD C0 0F 70 1B BB 98 B2 34 B4 9A EE D3 17 FD 57 09 FC 54 46 35 7C 6F 47 ED EB 80 BE F0 69 B0 05 92 2C 40 41 77 88 94 C3 A7 CF A8 01 D0 65 D7 1E FC 69 12 4D C0 82 6F 82 06 BA 62 DC A6 0E 84 83 60 6A 7C 7A 14 40 1B E9 D0 2E 03 F1 A8 0E 98 C0 58 DB 08 1B 0D F8 ED 18 EC 8B A9 4A 4B AE FA 3A DA 3F C7 3F DE CC 66 1D FE 79 D0 "
# )

# SAMPLE_RATE = 48000  # hertz
# FRAME_DURATION = 20  # milliseconds
# FRAMES_PER_SECOND = 1000 // FRAME_DURATION
# SAMPLES_PER_FRAME = SAMPLE_RATE // FRAMES_PER_SECOND
# CHANNELS = 2
# SAMPLES_PER_CHANNEL_FRAME = SAMPLES_PER_FRAME // CHANNELS

# d = Decoder(SAMPLE_RATE, CHANNELS)
# d.decode(p, SAMPLES_PER_CHANNEL_FRAME)

# from opuslib import Decoder

# SAMPLE_RATE = 48000  # hertz
# FRAME_DURATION = 20  # milliseconds
# FRAMES_PER_SECOND = 1000 // FRAME_DURATION
# SAMPLES_PER_FRAME = SAMPLE_RATE // FRAMES_PER_SECOND
# CHANNELS = 2
# SAMPLES_PER_CHANNEL_FRAME = SAMPLES_PER_FRAME // CHANNELS

# packet = bytes.fromhex("4F 70 75 73 48 65 61 64 01 02 38 01 80 BB 00 00 00 00 00")

# decoder = Decoder(SAMPLE_RATE, CHANNELS)
# result = decoder.decode(packet, SAMPLES_PER_CHANNEL_FRAME)

# print(result)
